{"version":3,"sources":["components/TodoHeader.js","components/TodoListItem.js","components/TodoList.js","components/TodoForm.js","components/TodoFooter.js","components/TodoApp.js","App.js","serviceWorker.js","index.js"],"names":["TodoHeader","Component","TodoListItem","props","onClickClose","bind","onClickDone","index","parseInt","this","removeItem","markTodoDone","todoClass","item","done","className","aria-hidden","onClick","value","type","TodoList","items","map","key","TodoForm","form","React","createRef","inputName","onSubmit","current","focus","event","preventDefault","newItemValue","console","log","addItem","reset","ref","placeholder","TodoFooter","version","TodoApp","state","todoItems","initItems","todoItem","unshift","length","setState","itemIndex","splice","todo","push","id","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c0e47b31.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass TodoHeader extends Component {\r\n  render () {\r\n    return <h1>Todo list</h1>;\r\n  }\r\n}\r\n\r\nexport default TodoHeader;","import React, { Component } from 'react';\r\n\r\nclass TodoListItem extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onClickClose = this.onClickClose.bind(this);\r\n    this.onClickDone = this.onClickDone.bind(this);\r\n  }\r\n  onClickClose() {\r\n    var index = parseInt(this.props.index);\r\n    this.props.removeItem(index);\r\n  }\r\n  onClickDone() {\r\n    var index = parseInt(this.props.index);\r\n    this.props.markTodoDone(index);\r\n  }\r\n  render () {\r\n    var todoClass = this.props.item.done ? \"done\" : \"undone\";\r\n    return(\r\n      <li className=\"list-group-item \">\r\n        <div className={todoClass}>\r\n          <span className=\"glyphicon glyphicon-ok icon\" aria-hidden=\"true\" onClick={this.onClickDone}>✔</span>\r\n          {this.props.item.value}\r\n          <button type=\"button\" className=\"close\" onClick={this.onClickClose}>&times;</button>\r\n        </div>\r\n      </li>\r\n    );\r\n  }\r\n}\r\nexport default TodoListItem;","import React, { Component } from 'react';\r\nimport TodoListItem from './TodoListItem';\r\n\r\nclass TodoList extends Component {\r\n  render () {\r\n    var items = this.props.items.map((item, index) => {\r\n      return (\r\n        <TodoListItem key={index} item={item} index={index} removeItem={this.props.removeItem} markTodoDone={this.props.markTodoDone} />\r\n      );\r\n    });\r\n    return (\r\n      <ul className=\"list-group\"> {items} </ul>\r\n    );\r\n  }\r\n}\r\nexport default TodoList;","import React, { Component } from 'react';\r\n\r\nclass TodoForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.form = React.createRef();\r\n    this.inputName = React.createRef();\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    this.inputName.current.focus();\r\n  }\r\n  onSubmit(event) {\r\n    event.preventDefault();\r\n    var newItemValue = this.inputName.current.value;\r\n    console.log(newItemValue);\r\n    if(newItemValue) {\r\n      this.props.addItem({newItemValue});\r\n      this.form.reset();\r\n    }\r\n  }\r\n  render () {\r\n    return (\r\n      <form ref={form => this.form = form} onSubmit={this.onSubmit} className=\"form-inline\">\r\n        <input type=\"text\" ref={this.inputName} className=\"form-control\" placeholder=\"add a new todo...\"/>\r\n        <button type=\"submit\" className=\"btn btn-default\">Add</button> \r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoForm;\r\n","import React, { Component } from 'react';\r\n\r\nclass TodoFooter extends Component {\r\n  render () {\r\n    return <h5>Currently using React {React.version}</h5>;\r\n  }\r\n}\r\n\r\nexport default TodoFooter;","import React, { Component } from 'react';\r\nimport TodoHeader from './TodoHeader';\r\nimport TodoList from './TodoList';\r\nimport TodoForm from './TodoForm';\r\nimport TodoFooter from './TodoFooter';\r\n\r\nclass TodoApp extends Component {\r\n  constructor (props) {\r\n    super(props);\r\n    this.addItem = this.addItem.bind(this);\r\n    this.removeItem = this.removeItem.bind(this);\r\n    this.markTodoDone = this.markTodoDone.bind(this);\r\n    this.state = {todoItems: this.props.initItems};\r\n  }\r\n  addItem(todoItem) {\r\n    this.props.initItems.unshift({\r\n      index: this.props.initItems.length+1,\r\n      value: todoItem.newItemValue,\r\n      done: false\r\n    });\r\n    this.setState({todoItems: this.props.initItems});\r\n  }\r\n  removeItem (itemIndex) {\r\n    this.props.initItems.splice(itemIndex, 1);\r\n    this.setState({todoItems: this.props.initItems});\r\n  }\r\n  markTodoDone(itemIndex) {\r\n    var todo = this.props.initItems[itemIndex];\r\n    this.props.initItems.splice(itemIndex, 1);\r\n    todo.done = !todo.done;\r\n    todo.done ? this.props.initItems.push(todo) : this.props.initItems.unshift(todo);\r\n    this.setState({todoItems: this.props.initItems});\r\n  }\r\n  render() {\r\n    return (\r\n      <div id=\"main\">\r\n        <TodoHeader />\r\n        <TodoList items={this.props.initItems} removeItem={this.removeItem} markTodoDone={this.markTodoDone}/>\r\n        <TodoForm addItem={this.addItem} />\r\n        <TodoFooter />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoApp;","/*\nTodo app structure\n\nTodoApp\n\t- TodoHeader\n\t- TodoList\n    - TodoListItem #1\n\t\t- TodoListItem #2\n\t\t- ...\n\t\t- TodoListItem #N\n\t- TodoForm\n*/\nimport React, { Component } from 'react';\nimport TodoApp from './components/TodoApp';\nimport './App.css';\n\nconst todoItems = [];\ntodoItems.push({index: 1, value: \"Học react\", done: false});\ntodoItems.push({index: 2, value: \"Đi mua sắm\", done: true});\ntodoItems.push({index: 3, value: \"Mua hoa\", done: true});\n\nclass App extends Component {\n  render() {\n    console.log(Component.version);\n    return (\n      <TodoApp initItems={todoItems}/>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}